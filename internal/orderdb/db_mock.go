// Code generated by MockGen. DO NOT EDIT.
// Source: orderservice/internal/orderdb (interfaces: OrderDB)
//
// Generated by this command:
//
//	mockgen -package orderdb -destination db_mock.go . OrderDB
//
// Package orderdb is a generated GoMock package.
package orderdb

import (
	context "context"
	schema "orderservice/internal/schema"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderDB is a mock of OrderDB interface.
type MockOrderDB struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDBMockRecorder
}

// MockOrderDBMockRecorder is the mock recorder for MockOrderDB.
type MockOrderDBMockRecorder struct {
	mock *MockOrderDB
}

// NewMockOrderDB creates a new mock instance.
func NewMockOrderDB(ctrl *gomock.Controller) *MockOrderDB {
	mock := &MockOrderDB{ctrl: ctrl}
	mock.recorder = &MockOrderDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDB) EXPECT() *MockOrderDBMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderDB) AddOrder(arg0 context.Context, arg1 schema.Order, arg2 schema.SeqNumber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderDBMockRecorder) AddOrder(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderDB)(nil).AddOrder), arg0, arg1, arg2)
}

// GetOrder mocks base method.
func (m *MockOrderDB) GetOrder(arg0 context.Context, arg1 schema.OrderUID) (schema.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(schema.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderDBMockRecorder) GetOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderDB)(nil).GetOrder), arg0, arg1)
}

// ListOrders mocks base method.
func (m *MockOrderDB) ListOrders(arg0 context.Context) ([]schema.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0)
	ret0, _ := ret[0].([]schema.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockOrderDBMockRecorder) ListOrders(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOrderDB)(nil).ListOrders), arg0)
}

// SeqNumber mocks base method.
func (m *MockOrderDB) SeqNumber(arg0 context.Context) (schema.SeqNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeqNumber", arg0)
	ret0, _ := ret[0].(schema.SeqNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeqNumber indicates an expected call of SeqNumber.
func (mr *MockOrderDBMockRecorder) SeqNumber(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeqNumber", reflect.TypeOf((*MockOrderDB)(nil).SeqNumber), arg0)
}
